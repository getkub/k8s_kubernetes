{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "alert-webhook",
        "options": {}
      },
      "id": "1160b827-885a-41c6-a1b4-ce294cbde270",
      "name": "Alert Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -144,
        96
      ],
      "webhookId": "alert-webhook-001"
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "url": "https://quickstart-es-http.elastic-system.svc.cluster.local:9200/soc-playbooks/_search",
        "allowUnauthorizedCerts": true,
        "jsonParameters": true,
        "options": {}
      },
      "id": "f9fc6181-c666-4545-96c8-1d077a0732ea",
      "name": "Find Playbook",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        96,
        96
      ],
      "credentials": {
        "httpBasicAuth": {
          "id": "OACrezDoHefwXEqF",
          "name": "elastic_local"
        }
      }
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "requestMethod": "POST",
        "url": "https://quickstart-es-http.elastic-system.svc.cluster.local:9200/_query",
        "allowUnauthorizedCerts": true,
        "options": {},
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "query",
              "value": "={{$json.query}}"
            }
          ]
        }
      },
      "id": "0c3fee09-22ef-464d-97bd-96c669210a21",
      "name": "Run ES|QL Query",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        576,
        96
      ],
      "credentials": {
        "httpBasicAuth": {
          "id": "OACrezDoHefwXEqF",
          "name": "elastic_local"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const playbook = $json.hits?.hits?.[0]?._source || {};\nconst template = playbook.esql_template || '';\n\nconst webhookData = $node[\"Alert Webhook\"].json;\nconst domain = webhookData.body?.domain || 'unknown.com';\n\nreturn [\n  {\n    json: {\n      query: template.replace('{{domain}}', domain),\n      domain,\n    },\n  },\n];\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        96
      ],
      "id": "67a63828-4fb0-4941-8e76-7e29d04648f3",
      "name": "Code"
    },
    {
      "parameters": {
        "resource": "chat",
        "model": "gpt-4o",
        "prompt": {
          "messages": [
            {
              "role": "system",
              "content": "=You are a cybersecurity log analysis assistant. \nYour task is to analyze firewall and security logs (e.g., Fortinet logs) and produce clear, concise, and accurate summaries. \nIdentify unique users, accessed domains, counts of events, and time ranges. \nBe concise, but include important details like IP addresses, domains, and timestamps if relevant.\n"
            },
            {
              "content": "=You are an expert log analyst.\n\nYou will be given a Fortinet log dataset in JSON format.\n\nDataset structure:\n- \"columns\": an array defining column names,\n- \"values\": an array of rows where each row corresponds to the columns.\n\nYour tasks:\n1. Reconstruct the log entries by mapping each row of \"values\" to its column keys.\n2. Analyze the log entries.\n3. Return a JSON object with exactly the following keys:\n   - \"uniqueUsers\": number of unique users (source.ip).\n   - \"domains\": comma-separated list of domains accessed.\n   - \"timeRange\": an object with \"earliest\" and \"latest\" ISO8601 timestamps (from @timestamp).\n   - \"summary\": a brief 2-3 sentence summary of the activity.\n   - \"risk_ratio\": a floating-point number between 0 and 1, where 0 = no risk and 1 = high risk.\n   - \"judgement\": a short human-readable conclusion based on the risk assessment (e.g., \"No further investigation required\" or \"Requires immediate attention\").\n\nImportant:\n- Return only a single JSON object with these six keys.\n- Do NOT include any explanations, markdown code blocks, or other text.\n- The output must be strictly valid JSON.\n\nHere is the log data:\n{{ JSON.stringify($json) }}\n"
            }
          ]
        },
        "options": {
          "maxTokens": 500
        },
        "requestOptions": {}
      },
      "id": "785a9e68-e33b-4b6f-b636-44c48006d6b1",
      "name": "OpenAI_summarise",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [
        832,
        96
      ],
      "credentials": {
        "openAiApi": {
          "id": "0M71cNo4tQktcxRm",
          "name": "oai_key"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the content from current item\nconst rawJsonString = $json.message?.content;\n\nif (!rawJsonString) {\n  throw new Error('OpenAI response content missing');\n}\n\nlet data;\ntry {\n  data = JSON.parse(rawJsonString);\n} catch (error) {\n  throw new Error('Failed to parse JSON from OpenAI response: ' + error.message);\n}\n\n// Risk color logic\nconst riskPercent = (data.risk_ratio ?? 0) * 100;\nconst riskColor = (data.risk_ratio ?? 0) >= 0.7 ? 'red' : 'green';\n\n// HTML with CSS\nconst htmlReport = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Log Analysis Report</title>\n  <style>\n    body { font-family: \"Segoe UI\", Tahoma, sans-serif; background-color: #f8f9fa; padding: 20px; }\n    h2, h3 { color: #444; text-align: center; }\n    table { margin: 20px auto; border-collapse: collapse; width: 70%; max-width: 800px; background-color: #fff; \n      box-shadow: 0 2px 6px rgba(0,0,0,0.1); border-radius: 8px; overflow: hidden; }\n    th, td { padding: 12px 15px; text-align: left; border-bottom: 1px solid #ddd; }\n    th { background-color: #0066cc; color: #fff; }\n    tr:nth-child(even) td { background-color: #f4f6f9; }\n    tr:hover td { background-color: #eaf2ff; }\n    .risk { font-weight: bold; }\n  </style>\n</head>\n<body>\n  <h2>Fortinet Log Analysis Report</h2>\n\n  <!-- Main Metrics Table -->\n  <table>\n    <tr><th>Metric</th><th>Details</th></tr>\n    <tr><td>Unique Users (source.ip)</td><td>${data.uniqueUsers ?? 'N/A'}</td></tr>\n    <tr><td>Domains Accessed</td><td>${data.domains ?? 'N/A'}</td></tr>\n    <tr><td>Start Time</td><td>${data.timeRange?.earliest ?? 'N/A'}</td></tr>\n    <tr><td>End Time</td><td>${data.timeRange?.latest ?? 'N/A'}</td></tr>\n    <tr><td>Risk (%)</td><td class=\"risk\" style=\"color:${riskColor};\">${riskPercent.toFixed(1)}%</td></tr>\n    <tr><td>Judgement</td><td>${data.judgement ?? 'N/A'}</td></tr>\n  </table>\n\n  <!-- Summary Table -->\n  <h3>Activity Summary</h3>\n  <table>\n    <tr><th>Summary</th></tr>\n    <tr><td>${data.summary ?? 'No summary available'}</td></tr>\n  </table>\n\n</body>\n</html>\n`;\n\nreturn [{ json: { htmlReport: htmlReport } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1072,
        96
      ],
      "id": "1aca4046-14a3-4c14-87e4-400a1fe40a1c",
      "name": "Code1"
    }
  ],
  "connections": {
    "Alert Webhook": {
      "main": [
        [
          {
            "node": "Find Playbook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Playbook": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Run ES|QL Query": {
      "main": [
        [
          {
            "node": "OpenAI_summarise",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Run ES|QL Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI_summarise": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "43ff53e24be6503dc4d60eef7def9a4e3e2f06f971c8d03e8aabb0a230fe1d57"
  }
}